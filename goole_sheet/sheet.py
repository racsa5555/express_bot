from datetime import datetime, timezone, timedelta
import gspread
import pandas as pd
from google.oauth2.service_account import Credentials
from gspread_formatting import Color, CellFormat,format_cell_range

scopes = [
    'https://www.googleapis.com/auth/spreadsheets',
    'https://www.googleapis.com/auth/drive'
]
credentials = Credentials.from_service_account_file('./credentials.json', scopes=scopes)
client = gspread.authorize(credentials)

def append_products(df):
    tz = timezone(timedelta(hours=6))
    date = datetime.now(tz)
    current_date = date.strftime("%m-%d")
    sheet = client.open(title = 'Prestige-products').sheet1
    values = df.values.tolist()
    data = []
    for index, row in df.iterrows():
        track_code = row[0]
        client_id = row[1]
        status = '–í –ö–∏—Ç–∞–µ'
        date = current_date
        if len(row) == 3:
            weight = str(row[2]) if not pd.isnull(row.iloc[2]) else ""
        else:
            weight = ''
        data.append([track_code, client_id, status, date, weight])
        # for row in values:
        #     row.append('–í –ö–∏—Ç–∞–µ')
        #     row.append(current_date)
        #     row = [str(value) for value in row]
        # sheet.append_rows(values)
        # return True
    sheet.append_rows(data)
    # length = len(df)
    # new_statuses = ['–í –ö–∏—Ç–∞–µ' for x in range(length)]
    # new_dates = [str(current_date) for x in range(length)]
    # column_weights = []
    # for l in values:
    #     column_weights.append(l.pop())
    #     l = [str(value) for value in l]
    # sheet.append_rows(values)
    # result = [new_statuses,new_dates,column_weights]
    # transposed_result = list(map(list, zip(*result)))
    # sheet.update('C2', transposed_result)
    return True




def update_google_sheet(track_codes, new_status):
    sheet = client.open(title = 'Prestige-products').sheet1 
    data = sheet.get_all_records()
    tz = timezone(timedelta(hours=6))
    date = datetime.now(tz)
    current_date = date.strftime("%m-%d")
    for row in data:
        if row['–¢—Ä–µ–∫ –ö–æ–¥'] in track_codes:
            row['–°—Ç–∞—Ç—É—Å'] = new_status
            row['–î–∞—Ç–∞'] = current_date
    add_track_codes = {code for code in track_codes if code not in {row['–¢—Ä–µ–∫ –ö–æ–¥'] for row in data}}
    current_row = len(sheet.get_all_records())+2
    last_row = current_row-1
    if add_track_codes:
        for code in add_track_codes:
            sheet.append_row([code])
            last_row += 1
    if add_track_codes:
        diapazon = f'A{current_row}:A{last_row}'
        sheet.format(diapazon,{"backgroundColor": {"red": 1.0}})
    formatted_data = [
        [str(value) if isinstance(value, (int, float)) else value for value in row.values()]
        for row in data
    ]
    sheet.update([list(data[0].keys())] + formatted_data)
    return True


def find_order_by_id(item_id,lang):
    spreadsheet = client.open(title='Prestige-products')
    sheets = spreadsheet.worksheets()
    sheet = sheets[0]
    data = sheet.get_all_values()
    df = pd.DataFrame(data[1:], columns=data[0])
    items = df[df['–ö–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞'] == item_id]  
    orders_info = ""
    k = 0
    extra = ''
    extra_date = ''
    for index, row in items.iterrows():
        extra = ''
        extra_date = ''
        if row['–î–∞—Ç–∞']:
            extra_date = f"–î–∞—Ç–∞: {row['–î–∞—Ç–∞']}"
        if row['–í–µ—Å']:
            extra = f", –í–µ—Å: {row['–í–µ—Å']} –∫–≥"
        if row['–°—Ç–∞—Ç—É—Å'] == '–í –ü—É—Ç–∏':
            status = 'üöõ –í –ü—É—Ç–∏'
        if row['–°—Ç–∞—Ç—É—Å'] == '–í –ö–∏—Ç–∞–µ':
            status = 'üá®üá≥ –í –ö–∏—Ç–∞–µ'
        if row['–°—Ç–∞—Ç—É—Å'] == '–í –ö–†':
            status = 'üá∞üá¨ –≤ –ö–†'
        orders_info += f"–ö–æ–¥: {row['–¢—Ä–µ–∫ –ö–æ–¥']}, {status}{extra}\n{extra_date},\n‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî-\n"
    if orders_info:
        return orders_info  
    if lang == 'RU':
        return f"–£ –≤–∞—Å –ø–æ–∫–∞-—á—Ç–æ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤"
    else:
        return f"–°–∏–∑–¥–µ —Ç–æ–≤–∞—Ä –∂–æ–∫"

def find_order_by_track_code(track_code,lang):
    track_code = str(track_code)  
    spreadsheet = client.open(title='Prestige-products')
    sheets = spreadsheet.worksheets()
    sheet = sheets[0]
    data = sheet.get_all_values()
    df = pd.DataFrame(data[1:], columns=data[0]) 
    item = df[df['–¢—Ä–µ–∫ –ö–æ–¥'] == track_code]
    extra = ''
    extra_date = ''
    if not item.empty:
        status = item.iloc[0]['–°—Ç–∞—Ç—É—Å']
        time = item.iloc[0]['–î–∞—Ç–∞']
        weight = item.iloc[0]['–í–µ—Å']
        if weight:
            extra = f', –í–µ—Å: {weight} –∫–≥'
        if time:
            extra_date = f"–î–∞—Ç–∞: {time}"
        if status == '–í –ü—É—Ç–∏':
            status = 'üöõ –í –ü—É—Ç–∏'
        if status == '–í –ö–∏—Ç–∞–µ':
            status = 'üá®üá≥ –í –ö–∏—Ç–∞–µ'
        if status == '–í –ö–†':
            status = 'üá∞üá¨ –≤ –ö–†'
        info = f'–ö–æ–¥: {track_code}, {status}{extra}\n{extra_date}\n'
        return info
    if lang == 'RU':
        return '–¢–æ–≤–∞—Ä —Å —Ç–∞–∫–∏–º —Ç—Ä–µ–∫-–∫–æ–¥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ'
    else:
        return '–ë—É–ª —Ç–æ–≤–∞—Ä —Ç–∞–±—ã–ª–≥–∞–Ω–∂–æ–∫'

def register_client(data):
    if data.get('ref'):
        spreadsheet = client.open(title='Prestige-clients')
        sheets = spreadsheet.worksheets()
        sheet = sheets[0]
        sheet.append_row([data['city'],data['full_name'] + ' ' + data['name'],data['phone_number'],data['id']])
    spreadsheet = client.open(title='Prestige-clients')
    sheets = spreadsheet.worksheets()
    sheet = sheets[0]
    sheet.append_row([data['city'],data['full_name'] + ' ' + data['name'],data['phone_number'],data['id']])
    return True

def update_client_by_id(client_id, new_data,ref):
    # if ref:
    #     spreadsheet = client.open('Prestige-clients')
    #     sheets = spreadsheet.worksheets()
    #     sheet = sheets[0]
    #     data = sheet.get_all_records()
    #     for i, row in enumerate(data, start=2):
    #         if row['id'] == client_id:
    #             for key, value in new_data.items():
    #                 sheet.update_cell(i, sheet.find(key).col, value)
    spreadsheet = client.open('Prestige-clients')
    sheets = spreadsheet.worksheets()
    sheet = sheets[0]
    data = sheet.get_all_records()
    for i, row in enumerate(data, start=2):
        if row['id'] == client_id:
            for key, value in new_data.items():
                sheet.update_cell(i, sheet.find(key).col, value)
            return True
    return False

def find_user_by_data(phone_number,client_id,lang):
    spreadsheet = client.open('Prestige-clients')
    sheets = spreadsheet.worksheets()
    sheet = sheets[0]
    if client_id.isdigit() == False:
        if lang == 'RU':
            return '–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∏–ª–∏ –∫–æ–¥'
        else:
            return '–ö–µ—á–∏—Ä–µ—Å–∏–∑, –Ω–æ–º–µ—Ä –∂–µ –∂–µ–∫–µ –∫–æ–¥ —Ç—É—É—Ä–∞ —ç–º–µ—Å'


    data = sheet.get_all_records()
    for i, row in enumerate(data, start=2):
        if row['id'] == int(client_id) and row['–ù–æ–º–µ—Ä'] == int(phone_number):
            data = {'id':client_id,
                    'name':row['–§–ò–û'].split()[0],
                    'full_name':row['–§–ò–û'].split()[1],
                    'phone_number':row['–ù–æ–º–µ—Ä'],
                    'city':row['–ì–æ—Ä–æ–¥'],
                    'language':lang
                    }
            return data
    if lang == 'RU':
        return '–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∏–ª–∏ –∫–æ–¥'
    else:
        return '–ö–µ—á–∏—Ä–µ—Å–∏–∑, –Ω–æ–º–µ—Ä –∂–µ –∂–µ–∫–µ –∫–æ–¥ —Ç—É—É—Ä–∞ —ç–º–µ—Å'

    


